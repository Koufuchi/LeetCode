public class heap {
    
}

/* 
   Heap - 堆

   一般情況下，堆通常指的是二叉堆，二叉堆是一個近似完全二元樹的數據結構，
   
   即披著二元樹羊皮的陣列，故使用陣列來實現較為便利。
   
   子結點的鍵值(key)或索引總是小於（或者大於）它的父節點，
   
   且每個節點的左右子樹又是一個二叉堆( 大根堆(Max Heap) 或者 小根堆(Min Heap) )。
   
   根節點最大的堆叫做最大堆或大根堆，根節點最小的堆叫做最小堆或小根堆。常被用作實現優先隊列(Priority Queue)。

   @ 特點

    (1) 以陣列表示，但是以完全二元樹的方式理解。
    (2) 唯一能夠同時最優地利用空間和時間的方法——最壞情況下也能保證使用 2NlogN 次比較和恒定的額外空間。
    (3) 在索引從 0 開始的陣列中：
        父節點 i 的左子節點在位置 (2*i+1)
        父節點 i 的右子節點在位置 (2*i+2)
        子節點 i 的父節點在位置 floor((i-1)/2)

   @ 堆的基本操作

    以大根堆為例，堆的常用操作如下。

    (1) 最大堆調整（Max_Heapify）   ：將堆的末端子節點作調整，使得子節點永遠小於父節點
    (2) 創建最大堆（Build_Max_Heap）：將堆所有數據重新排序
    (3) 堆排序    （HeapSort）      ：移除位在第一個數據的根節點，並做最大堆調整的遞迴運算

    其中步驟 1 是給步驟 2 和 3 用的。
*/